Basic Javascript
NPM
Basic NodeJS(in built modules)
NodeJs(full Stack)(Express)
NodeJs - Mongo
API With NodeJs(Rest)
DashBoard(CRUD)
Third Party APi NodeJs
Redis
Email With Node
OO_NodeJs
Login/Logout
NodeJs-Postgres(Sql)
GraphQL API
ChatApp

------
Production
------
Nginx
Docker

-----
GitHub



/////////
Javascript


>What is NodeJS

Async NonBlock  Single Thread I/O 
////////////////////////////////////////
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
>>>Check Node<<<
> Open CMD
> node -v

//////////
    NPM
//////////
Node package manage
> open source
>Packages/node_modules/Dependency/node_package

>>>>>>>>><<<<<
>>>> Local Dependency
>>>> Global Dependency


Javascript Object Notation
{
    "name":"abc",
    "class":1
}
/////////
Package.json
>name
>version
>commands
>Dependency

//////////
Step to create package.json
///////////
> Navigate to folder where you want to create using CMD
> npm init
> Answer all question
> type "yes"

//////////
Step to install local Dependency
///////////
> Navigate to folder using CMD
> npm install <package_name>/npm i  <package_name>

//////////
Step to install global Dependency
///////////
Win
> run cmd as administrator
> npm i -g @abc

Mac/Linux
> run terminal
> sudo npm i -g @abc

@aakashdeveeloper/create-node-app

//////Continous Development//////
nodemon

> npm i -g nodemon


for Production
> npm start

for Development
> npm run dev 



///
Es5

function add(a,b){
    return a+b
}

//es6

const add = (a,b) => { return a+b }

/////////
MongoDB
///////
NoSql

//Sql
sno  | Hindi  | English
1    | 80     |
2    |        | 80


//NoSql
[
    {
        sno:1,
        hindi:80
    },
    {
        sno:2,
        English:80
    }
]
------------------
Sql         NoSql
DataBase    DataBase
Table       Collections
Row         Document
//////////////

Mac
sudo mkdir /System/Volumes/Data/data/db

Window
C:/data/db
Use cmd and naviagte
> C:Program/Mongo/3.4/bin
> mongod  (mongodb server)

>Use cmd and naviagte
> C:Program/Mongo/3.4/bin
> mongo (console)


Mac
> Open Terminal
> sudo mongod --dbpath /System/Volumes/Data/data/db

>Open Terminal
>mongo


(27017)

//////
 show dbs
 use classpractice
 show collections
 db.myproduct.find()
 db.myproduct.find().pretty()

//Projection
db.myproduct.find({},{class:1})
 db.myproduct.find({},{class:1,_id:0})
 db.myproduct.find({},{class:0,_id:0})
 db.myproduct.find({},{id:1,class:1,_id:0})

//Condition
db.myproduct.find({"id":4},{class:1,_id:0})
db.myproduct.find({"id":4,"class":"Mongo"},{class:1,_id:0})
db.myproduct.find({"id":4,"class":"AI"},{class:1,_id:0})
{ "class" : "AI" }
> db.myproduct.find({"id":4"class":"AI"}{},{class:1,_id:0}).count()
1
> db.myproduct.count()

db.myproduct.find({$or:[{id:4},{class:"Mongo"}]})

/////////
db.myproduct.insert({"id":6,class:"Ansible",place:"Nareshit"})
db.myproduct.insert({"_id":002,"id":7,class:"Jenkis",place:"Nareshit"})
////////////

db.myproduct.find().sort({"place":-1})
db.myproduct.find().sort({"place":-1}).limit(3)

 0 == false
 1 == true

 var a = 10
 if(true){
     
     console.log(a)
 }
 a = 20
 console.log(a)

db.product.insertMany([{},{},{}])

////
npm i ejs express request
//////


var a = 10
var b = "my age is "+a
var c = `my age is ${a}`

//Es5
function add(a,b){
    return a+b
}

//Es6
var add = (a,b) => { return a+b}

npm i @babel/core @babel/preset-env @babel/register --save-dev


////
Download and install Redis
> redis-server
> redis-cli
> KEYS *
> set key value
> get 'keyname'

>npm i redis response-time axios


> npm i -g @aakashdeveloper/create-node-app
> generate


npm i express body-parser bcryptjs jsonwebtoken mongoose


docker build . -t nareshitJan
docker image ls
docker run -p 8760:7800 nareshitjan


npm i -g pm2

pm2 start start.js


//nginx.conf
    server {
        listen       8082;
        server_name  localhost;

        location / {
	    proxy_pass http://127.0.0.1:8900;
	    proxy_http_version 1.1;
    	    proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_set_header Host $host;
            proxy_cache_bypass $http_upgrade;
        }
    }

   >  nginx


npm i mocha chai chai-http